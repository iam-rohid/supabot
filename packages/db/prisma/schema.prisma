datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "fullTextSearch", "fullTextIndex"]
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts             Account[]
  sessions             Session[]
  organizations        OrganizationMembership[]
  feedbacks            Feedback[]
  resolvedHelpRequests HelpRequest[]
}

model Account {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  slug                 String   @unique
  name                 String
  image                String?
  plan                 String   @default("free")
  customerId           String?  @unique
  subscriptionId       String?  @unique
  priceId              String?
  billingCycleStartDay Int      @default(1)

  chatbots Chatbot[]
  members  OrganizationMembership[]
  invites  OrganizationInvite[]
}

enum OrganizationMembershipRole {
  OWNER
  MEMBER
}

model OrganizationInvite {
  createdAt      DateTime     @default(now())
  expires        DateTime
  email          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
}

model OrganizationMembership {
  userId         String
  organizationId String
  role           OrganizationMembershipRole @default(MEMBER)
  createdAt      DateTime                   @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Chatbot {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String   @db.VarChar(32)
  image          String?
  metadata       Json?
  organizationId String
  settings       Json?

  links         Link[]
  documents     Document[]
  quickPrompts  QuickPrompt[]
  conversations Conversation[]
  users         ChatbotUser[]

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}

enum LinkStatus {
  QUEUED
  TRAINING
  TRAINED
  ERROR
  CANCELED
}

model Link {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lastTrainedAt DateTime?
  canceledAt    DateTime?
  url           String
  chatbotId     String
  status        LinkStatus @default(QUEUED)
  error         String?
  metadata      Json?

  chatbot   Chatbot    @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  documents Document[]

  @@unique([chatbotId, url])
  @@index([lastTrainedAt])
}

model Document {
  id        String                       @id @default(cuid())
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
  content   String
  metadata  Json?
  embedding Unsupported("vector(1536)")?
  linkId    String?
  chatbotId String

  link    Link?   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

enum QuickPromptStatus {
  PUBLISHED
  UNPUBLISHED
}

model QuickPrompt {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  title              String            @db.VarChar(80)
  prompt             String            @db.VarChar(500)
  chatbotId          String
  metadata           Json?
  status             QuickPromptStatus @default(PUBLISHED)
  isFollowUpPrompt   Boolean           @default(false)
  isEscalationPrompt Boolean           @default(false)

  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}

model ChatbotUser {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String
  name          String?
  emailVerified DateTime?
  chatbotId     String
  blocked       Boolean   @default(false)

  chatbot       Chatbot        @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  messages      Message[]

  @@unique([chatbotId, email])
}

enum ConversationStatus {
  OPEN
  CLOSED
}

model Conversation {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  closedAt  DateTime?
  title     String?
  status    ConversationStatus @default(OPEN)
  chatbotId String
  userId    String?
  url       String?
  ipAddress String?
  ipInfo    Json?

  chatbot  Chatbot      @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  user     ChatbotUser? @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
}

enum MessageRole {
  BOT
  USER
}

enum Reaction {
  LIKE
  DISLIKE
}

model Message {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  body           String
  role           MessageRole
  reaction       Reaction?
  conversationId String
  userId         String?
  metadata       Json?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         ChatbotUser? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  url       String?
  message   String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum HelpRequestPriority {
  LOW
  MEDIUM
  HIGH
}

model HelpRequest {
  id         String              @id @default(cuid())
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  email      String?
  subject    String?
  message    String?
  priority   HelpRequestPriority @default(MEDIUM)
  resolved   Boolean             @default(false)
  resolvedBy String?

  resolver User? @relation(fields: [resolvedBy], references: [id], onDelete: SetNull)
}
