datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model Chatbot {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String   @db.VarChar(32)
  slug           String   @unique @db.VarChar(32)
  image          String?
  metadata       Json?
  organizationId String

  links         Link[]
  documents     Document[]
  quickPrompts  QuickPrompt[]
  conversations Conversation[]
  users         ChatbotUser[]

  @@index([organizationId])
  @@index([updatedAt])
  @@index([name])
}

enum LinkStatus {
  QUEUED
  TRAINING
  TRAINED
  ERROR
  CANCELED
}

model Link {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lastTrainedAt DateTime?
  canceledAt    DateTime?
  url           String
  chatbotId     String
  status        LinkStatus @default(QUEUED)
  error         String?
  metadata      Json?

  chatbot   Chatbot    @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  documents Document[]

  @@unique([chatbotId, url])
  @@index([updatedAt])
  @@index([lastTrainedAt])
}

model Document {
  id        String                       @id @default(cuid())
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
  content   String
  metadata  Json?
  embedding Unsupported("vector(1536)")?
  linkId    String?
  chatbotId String

  link    Link?   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}

enum QuickPromptStatus {
  PUBLISHED
  UNPUBLISHED
}

model QuickPrompt {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  title     String            @db.VarChar(80)
  prompt    String            @db.VarChar(500)
  chatbotId String
  metadata  Json?
  status    QuickPromptStatus @default(PUBLISHED)

  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
  @@index([title])
}

model ChatbotUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?
  name      String?
  chatbotId String

  chatbot       Chatbot        @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  messages      Message[]

  @@unique([chatbotId, email])
}

enum ConversationStatus {
  OPEN
  CLOSED
}

model Conversation {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  title     String?
  status    ConversationStatus @default(OPEN)
  url       String?
  chatbotId String
  userId    String?

  chatbot  Chatbot      @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  user     ChatbotUser? @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
}

enum MessageRole {
  BOT
  USER
  AGENT
}

enum Reaction {
  LIKE
  DISLIKE
}

model Message {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  body           String
  role           MessageRole
  reaction       Reaction?
  conversationId String
  agentId        String?
  userId         String?
  metadata       Json?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         ChatbotUser? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([agentId])
}
